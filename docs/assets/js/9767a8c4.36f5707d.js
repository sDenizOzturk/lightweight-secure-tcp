"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[728],{8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>l});var i=r(6540);const s={},t=i.createContext(s);function o(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(t.Provider,{value:n},e.children)}},9759:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"internals/xtea256","title":"XTEA256 Encryption","description":"\ud83d\udd10 Overview","source":"@site/docs/internals/xtea256.md","sourceDirName":"internals","slug":"/internals/xtea256","permalink":"/lightweight-secure-tcp/docs/internals/xtea256","draft":false,"unlisted":false,"editUrl":"https://github.com/sDenizOzturk/lightweight-secure-tcp/tree/main/docusaurus/docs/internals/xtea256.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"title":"XTEA256 Encryption","sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Randomized Padding","permalink":"/lightweight-secure-tcp/docs/internals/random-padding"},"next":{"title":"Session Lifecycle","permalink":"/lightweight-secure-tcp/docs/internals/session-lifecycle"}}');var s=r(4848),t=r(8453);const o={title:"XTEA256 Encryption",sidebar_position:5},l="XTEA256 Encryption",c={},d=[{value:"\ud83d\udd10 Overview",id:"-overview",level:2},{value:"\u2699\ufe0f Key Properties",id:"\ufe0f-key-properties",level:2},{value:"\ud83d\udd04 Key Usage",id:"-key-usage",level:2},{value:"\ud83d\udd01 Number of Rounds",id:"-number-of-rounds",level:2},{value:"\ud83e\udde0 Why XTEA256?",id:"-why-xtea256",level:2}];function a(e){const n={br:"br",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"xtea256-encryption",children:"XTEA256 Encryption"})}),"\n",(0,s.jsx)(n.h2,{id:"-overview",children:"\ud83d\udd10 Overview"}),"\n",(0,s.jsxs)(n.p,{children:["XTEA256 is a lightweight symmetric encryption algorithm used in LightweightSecureTCP.",(0,s.jsx)(n.br,{}),"\n","It operates on ",(0,s.jsx)(n.strong,{children:"64-bit blocks"})," using a ",(0,s.jsx)(n.strong,{children:"256-bit key"}),", and is optimized for embedded systems."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"\ufe0f-key-properties",children:"\u2699\ufe0f Key Properties"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Encrypts 64-bit blocks (2 \xd7 32-bit unsigned integers)"}),"\n",(0,s.jsx)(n.li,{children:"Uses a 256-bit symmetric key (8 \xd7 32-bit integers)"}),"\n",(0,s.jsx)(n.li,{children:"Performs 32 rounds of encryption by default (configurable)"}),"\n",(0,s.jsx)(n.li,{children:"All 8 parts of the key are used in every round"}),"\n",(0,s.jsx)(n.li,{children:"Pure C++ implementation, no external dependencies"}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"-key-usage",children:"\ud83d\udd04 Key Usage"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\ud83e\udd1d ",(0,s.jsx)(n.strong,{children:"Handshake packets"})," are encrypted with a static shared key"]}),"\n",(0,s.jsxs)(n.li,{children:["\ud83d\udd11 ",(0,s.jsx)(n.strong,{children:"Session packets"})," are encrypted with a dynamically generated session key"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"You must call:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"LightweightSecureTCP::setHandshakeKey(myKey);\n"})}),"\n",(0,s.jsx)(n.p,{children:"before creating any server or client."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"-number-of-rounds",children:"\ud83d\udd01 Number of Rounds"}),"\n",(0,s.jsx)(n.p,{children:"By default, 32 rounds are performed, but you can configure this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"LightweightSecureTCP::setNumberOfRounds(64);\n"})}),"\n",(0,s.jsx)(n.p,{children:"Higher round counts increase encryption complexity but consume more CPU cycles."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"-why-xtea256",children:"\ud83e\udde0 Why XTEA256?"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Lightweight and fast (suitable for ESP32)"}),"\n",(0,s.jsx)(n.li,{children:"Predictable block size (easy to integrate with TCP)"}),"\n",(0,s.jsx)(n.li,{children:"Strong enough for session-level encryption in embedded contexts"}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:"Encryption is handled automatically by the library.\nYou only need to set the handshake key and, optionally, the number of rounds."})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}}}]);