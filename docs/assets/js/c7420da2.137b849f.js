"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[894],{5352:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"basic-usage/setting-client","title":"Setting Client","description":"\u2699\ufe0f Basic Example","source":"@site/docs/basic-usage/setting-client.md","sourceDirName":"basic-usage","slug":"/basic-usage/setting-client","permalink":"/lightweight-secure-tcp/docs/basic-usage/setting-client","draft":false,"unlisted":false,"editUrl":"https://github.com/sDenizOzturk/lightweight-secure-tcp/tree/main/docusaurus/docs/basic-usage/setting-client.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Setting Client","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Setting Server","permalink":"/lightweight-secure-tcp/docs/basic-usage/setting-server"},"next":{"title":"Internals","permalink":"/lightweight-secure-tcp/docs/category/internals"}}');var i=s(4848),c=s(8453);const r={title:"Setting Client",sidebar_position:3},l="Setting Up a Client",a={},d=[{value:"\u2699\ufe0f Basic Example",id:"\ufe0f-basic-example",level:2},{value:"\ud83d\udce9 Receiving Messages",id:"-receiving-messages",level:2},{value:"\u2709\ufe0f Sending Messages",id:"\ufe0f-sending-messages",level:2},{value:"\u274c Error Handling",id:"-error-handling",level:2},{value:"\ud83d\udd0c Disconnecting",id:"-disconnecting",level:2},{value:"\u2705 Notes",id:"-notes",level:2}];function o(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"setting-up-a-client",children:"Setting Up a Client"})}),"\n",(0,i.jsx)(n.h2,{id:"\ufe0f-basic-example",children:"\u2699\ufe0f Basic Example"}),"\n",(0,i.jsxs)(n.p,{children:["To connect to a server, initialize ",(0,i.jsx)(n.code,{children:"LightweightSecureClient"})," with the server's IP address and port number, then call ",(0,i.jsx)(n.code,{children:"connectToServer()"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include "lightweightsecuretcp.h"\n\nconst std::string SERVER_IP = "127.0.0.1";\nconst int PORT = 44444;\n\nLightweightSecureClient client(SERVER_IP, PORT);\nclient.connectToServer();\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:["You must call ",(0,i.jsx)(n.code,{children:"LightweightSecureTCP::setHandshakeKey(...)"})," ",(0,i.jsx)(n.strong,{children:"before"})," creating the client.\nThe key must exactly match the one used by the server."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-receiving-messages",children:"\ud83d\udce9 Receiving Messages"}),"\n",(0,i.jsxs)(n.p,{children:["You can listen for incoming messages by setting the ",(0,i.jsx)(n.code,{children:"onMessageReceived"})," callback:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'client.setOnMessageReceived([](const std::string& message) {\n    std::cout << "[Client] Received: " << message << std::endl;\n});\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"\ufe0f-sending-messages",children:"\u2709\ufe0f Sending Messages"}),"\n",(0,i.jsx)(n.p,{children:"Once connected, you can send messages to the server:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'client.sendMessage("Hello from client!");\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-error-handling",children:"\u274c Error Handling"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'client.setOnError([](const std::string& error) {\n    std::cout << "[Client] Error: " << error << std::endl;\n});\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-disconnecting",children:"\ud83d\udd0c Disconnecting"}),"\n",(0,i.jsx)(n.p,{children:"To cleanly disconnect from the server:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"client.disconnect();\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-notes",children:"\u2705 Notes"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["All messaging must happen ",(0,i.jsx)(n.strong,{children:"after a successful handshake"})]}),"\n",(0,i.jsxs)(n.li,{children:["You can configure keep-alive before calling ",(0,i.jsx)(n.code,{children:"connectToServer()"})," using ",(0,i.jsx)(n.code,{children:"setKeepAliveConfig(...)"})]}),"\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:"isConnected()"})," to check if the client is still connected"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>l});var t=s(6540);const i={},c=t.createContext(i);function r(e){const n=t.useContext(c);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(c.Provider,{value:n},e.children)}}}]);