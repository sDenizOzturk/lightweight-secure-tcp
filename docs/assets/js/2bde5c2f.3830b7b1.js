"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[46],{1872:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>c,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"basic-usage/setting-server","title":"Setting Server","description":"\u2699\ufe0f Basic Example","source":"@site/docs/basic-usage/setting-server.md","sourceDirName":"basic-usage","slug":"/basic-usage/setting-server","permalink":"/lightweight-secure-tcp/docs/basic-usage/setting-server","draft":false,"unlisted":false,"editUrl":"https://github.com/sDenizOzturk/lightweight-secure-tcp/tree/main/docusaurus/docs/basic-usage/setting-server.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Setting Server","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Setting Handshake Key","permalink":"/lightweight-secure-tcp/docs/basic-usage/setting-key"},"next":{"title":"Setting Client","permalink":"/lightweight-secure-tcp/docs/basic-usage/setting-client"}}');var r=n(4848),i=n(8453);const c={title:"Setting Server",sidebar_position:2},a="Setting Up a Server",o={},l=[{value:"\u2699\ufe0f Basic Example",id:"\ufe0f-basic-example",level:2},{value:"\ud83e\udd1d After Handshake",id:"-after-handshake",level:2},{value:"\u274c Error Handling",id:"-error-handling",level:2},{value:"\ud83d\uded1 Stopping the Server",id:"-stopping-the-server",level:2},{value:"\u2705 Notes",id:"-notes",level:2}];function d(e){const s={code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"setting-up-a-server",children:"Setting Up a Server"})}),"\n",(0,r.jsx)(s.h2,{id:"\ufe0f-basic-example",children:"\u2699\ufe0f Basic Example"}),"\n",(0,r.jsxs)(s.p,{children:["To create a server, initialize ",(0,r.jsx)(s.code,{children:"LightweightSecureServer"})," with a port number and call ",(0,r.jsx)(s.code,{children:"start()"}),"."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-cpp",children:'#include "lightweightsecuretcp.h"\n\nconst int PORT = 44444;\nLightweightSecureServer server(PORT);\n\nserver.start();\n'})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsxs)(s.p,{children:["You must call ",(0,r.jsx)(s.code,{children:"LightweightSecureTCP::setHandshakeKey(...)"})," ",(0,r.jsx)(s.strong,{children:"before"})," starting the server.\nOtherwise, the process will terminate with an error."]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"-after-handshake",children:"\ud83e\udd1d After Handshake"}),"\n",(0,r.jsxs)(s.p,{children:["Once the handshake is successful, the server receives a ",(0,r.jsx)(s.code,{children:"Session"})," object:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-cpp",children:'server.setOnHandshakeSuccess([](HandshakeResult result, Session& session) {\n    // Send a message to the client\n    session.sendMessage("Hello");\n\n    // Listen for incoming messages\n    session.setOnMessageReceived([](const std::string& message) {\n        std::cout << "[Server] Received: " << message << std::endl;\n    });\n\n    // Optionally disconnect\n    session.disconnect();\n});\n'})}),"\n",(0,r.jsxs)(s.p,{children:["This ",(0,r.jsx)(s.code,{children:"Session"})," object is valid until the client disconnects or keep-alive times out."]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"-error-handling",children:"\u274c Error Handling"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-cpp",children:'server.setOnError([](const std::string& error) {\n    std::cout << "[Server] Error: " << error << std::endl;\n});\n'})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"-stopping-the-server",children:"\ud83d\uded1 Stopping the Server"}),"\n",(0,r.jsx)(s.p,{children:"To stop accepting connections and close the socket:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-cpp",children:"server.stop();\n"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"-notes",children:"\u2705 Notes"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["You can configure keep-alive before calling ",(0,r.jsx)(s.code,{children:"start()"})," using ",(0,r.jsx)(s.code,{children:"setKeepAliveConfig(...)"})]}),"\n",(0,r.jsxs)(s.li,{children:["All messaging must go through the ",(0,r.jsx)(s.code,{children:"Session"})," object returned in the handshake callback"]}),"\n",(0,r.jsxs)(s.li,{children:["Once ",(0,r.jsx)(s.code,{children:"session.disconnect()"})," is called, the connection is closed on both sides"]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>c,x:()=>a});var t=n(6540);const r={},i=t.createContext(r);function c(e){const s=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),t.createElement(i.Provider,{value:s},e.children)}}}]);