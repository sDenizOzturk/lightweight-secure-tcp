"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[778],{8453:(e,t,n)=>{n.d(t,{R:()=>c,x:()=>a});var s=n(6540);const i={},r=s.createContext(i);function c(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),s.createElement(r.Provider,{value:t},e.children)}},9709:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>c,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"reference/lightweightsecuretcp","title":"LightweightSecureTCP","description":"This class provides global configuration and initialization functions for the LightweightSecureTCP library.","source":"@site/docs/reference/lightweightsecuretcp.md","sourceDirName":"reference","slug":"/reference/lightweightsecuretcp","permalink":"/lightweight-secure-tcp/docs/reference/lightweightsecuretcp","draft":false,"unlisted":false,"editUrl":"https://github.com/sDenizOzturk/lightweight-secure-tcp/tree/main/docusaurus/docs/reference/lightweightsecuretcp.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"LightweightSecureTCP","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Reference","permalink":"/lightweight-secure-tcp/docs/category/reference"},"next":{"title":"LightweightSecureServer","permalink":"/lightweight-secure-tcp/docs/reference/core-lightweightsecureserver"}}');var i=n(4848),r=n(8453);const c={title:"LightweightSecureTCP",sidebar_position:1},a="LightweightSecureTCP",l={},o=[{value:"\ud83d\udd10 Static Methods",id:"-static-methods",level:2},{value:"static void setHandshakeKey(const Key&amp; key)",id:"static-void-sethandshakekeyconst-key-key",level:3},{value:"static void setNumberOfRounds(int numberOfRounds)",id:"static-void-setnumberofroundsint-numberofrounds",level:3},{value:"static void enableDebug(bool enable)",id:"static-void-enabledebugbool-enable",level:3},{value:"\ud83d\udcdd Related",id:"-related",level:2}];function d(e){const t={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"lightweightsecuretcp",children:"LightweightSecureTCP"})}),"\n",(0,i.jsxs)(t.p,{children:["This class provides global configuration and initialization functions for the LightweightSecureTCP library.",(0,i.jsx)(t.br,{}),"\n","It is intended to be used at application startup."]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"-static-methods",children:"\ud83d\udd10 Static Methods"}),"\n",(0,i.jsx)(t.h3,{id:"static-void-sethandshakekeyconst-key-key",children:"static void setHandshakeKey(const Key& key)"}),"\n",(0,i.jsx)(t.p,{children:"Sets the global encryption key used in the handshake process."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"LightweightSecureTCP::setHandshakeKey(myKey);\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Must be called ",(0,i.jsx)(t.strong,{children:"before any client or server starts"}),".\nInternally delegates to XTEA256::setHandshakeKey."]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h3,{id:"static-void-setnumberofroundsint-numberofrounds",children:"static void setNumberOfRounds(int numberOfRounds)"}),"\n",(0,i.jsx)(t.p,{children:"Sets how many encryption rounds are used during handshake encryption."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"LightweightSecureTCP::setNumberOfRounds(64);\n"})}),"\n",(0,i.jsx)(t.p,{children:"Default is typically 32, but you can increase it for stronger encryption.\nInternally delegates to XTEA256::setNumberOfRounds."}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h3,{id:"static-void-enabledebugbool-enable",children:"static void enableDebug(bool enable)"}),"\n",(0,i.jsx)(t.p,{children:"Enables or disables all debug logging."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"LightweightSecureTCP::enableDebug(true);\n"})}),"\n",(0,i.jsx)(t.p,{children:"This toggles the internal debug flag and affects whether lwsdebug(...) prints anything."}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"-related",children:"\ud83d\udcdd Related"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"./encryption-key",children:"Key"})," \u2192 used in setHandshakeKey"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"./utils-lwsdebug",children:"lwsdebug()"})," \u2192 structured debug logger"]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);