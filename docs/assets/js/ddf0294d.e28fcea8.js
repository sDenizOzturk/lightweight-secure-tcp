"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[90],{5125:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>a,frontMatter:()=>c,metadata:()=>r,toc:()=>h});const r=JSON.parse('{"id":"reference/core-lightweightsecureserver","title":"LightweightSecureServer","description":"A secure TCP server class that accepts incoming connections, performs handshake, and triggers user-defined events via callbacks.","source":"@site/docs/reference/core-lightweightsecureserver.md","sourceDirName":"reference","slug":"/reference/core-lightweightsecureserver","permalink":"/lightweight-secure-tcp/docs/reference/core-lightweightsecureserver","draft":false,"unlisted":false,"editUrl":"https://github.com/sDenizOzturk/lightweight-secure-tcp/tree/main/docusaurus/docs/reference/core-lightweightsecureserver.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"LightweightSecureServer","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"LightweightSecureTCP","permalink":"/lightweight-secure-tcp/docs/reference/lightweightsecuretcp"},"next":{"title":"Session","permalink":"/lightweight-secure-tcp/docs/reference/core-session"}}');var t=s(4848),i=s(8453);const c={title:"LightweightSecureServer",sidebar_position:2},l="LightweightSecureServer",d={},h=[{value:"Constructor",id:"constructor",level:2},{value:"LightweightSecureServer",id:"lightweightsecureserver-1",level:3},{value:"Destructor",id:"destructor",level:2},{value:"~LightweightSecureServer",id:"lightweightsecureserver-2",level:3},{value:"Configuration",id:"configuration",level:2},{value:"setKeepAliveConfig",id:"setkeepaliveconfig",level:3},{value:"Lifecycle",id:"lifecycle",level:2},{value:"start",id:"start",level:3},{value:"stop",id:"stop",level:3},{value:"Event Callback Setters",id:"event-callback-setters",level:2},{value:"setOnServerStarted",id:"setonserverstarted",level:3},{value:"setOnServerStopped",id:"setonserverstopped",level:3},{value:"setOnHandshakeStarted",id:"setonhandshakestarted",level:3},{value:"setOnHandshakeSuccess",id:"setonhandshakesuccess",level:3},{value:"setOnHandshakeFailed",id:"setonhandshakefailed",level:3},{value:"setOnError",id:"setonerror",level:3},{value:"Related",id:"related",level:2}];function o(e){const n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"lightweightsecureserver",children:"LightweightSecureServer"})}),"\n",(0,t.jsx)(n.p,{children:"A secure TCP server class that accepts incoming connections, performs handshake, and triggers user-defined events via callbacks."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"constructor",children:"Constructor"}),"\n",(0,t.jsx)(n.h3,{id:"lightweightsecureserver-1",children:"LightweightSecureServer"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Return type:"})," ",(0,t.jsx)(n.code,{children:"-"})," (constructor)"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"int port"})," \u2014 TCP port to listen on"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Initializes the internal server socket and random generator. Terminates the program if a handshake key is not set."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"destructor",children:"Destructor"}),"\n",(0,t.jsx)(n.h3,{id:"lightweightsecureserver-2",children:"~LightweightSecureServer"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Return type:"})," ",(0,t.jsx)(n.code,{children:"void"})]}),"\n",(0,t.jsxs)(n.p,{children:["Automatically calls ",(0,t.jsx)(n.code,{children:"stop()"})," to clean up the socket and threads."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,t.jsx)(n.h3,{id:"setkeepaliveconfig",children:"setKeepAliveConfig"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Return type:"})," ",(0,t.jsx)(n.code,{children:"void"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"int keepAliveIntervalMs"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"int inactivityTimeoutMs"})}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Configures keep-alive frequency and inactivity timeout. Throws ",(0,t.jsx)(n.code,{children:"std::invalid_argument"})," if values are invalid."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"lifecycle",children:"Lifecycle"}),"\n",(0,t.jsx)(n.h3,{id:"start",children:"start"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Return type:"})," ",(0,t.jsx)(n.code,{children:"void"})]}),"\n",(0,t.jsx)(n.p,{children:"Begins listening on the given port, accepts clients, and performs handshake in background threads."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"stop",children:"stop"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Return type:"})," ",(0,t.jsx)(n.code,{children:"void"})]}),"\n",(0,t.jsx)(n.p,{children:"Stops the server, disconnects the socket, and ends all active threads."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"event-callback-setters",children:"Event Callback Setters"}),"\n",(0,t.jsx)(n.h3,{id:"setonserverstarted",children:"setOnServerStarted"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Return type:"})," ",(0,t.jsx)(n.code,{children:"void"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"std::function<void()> callback"})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Called when the server is successfully started and listening."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"setonserverstopped",children:"setOnServerStopped"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Return type:"})," ",(0,t.jsx)(n.code,{children:"void"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"std::function<void()> callback"})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Called when the server stops (either manually or on shutdown)."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"setonhandshakestarted",children:"setOnHandshakeStarted"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Return type:"})," ",(0,t.jsx)(n.code,{children:"void"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"std::function<void(int clientSocket, const std::string& peerAddress)> callback"})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Called when a client connects, before the handshake begins."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"setonhandshakesuccess",children:"setOnHandshakeSuccess"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Return type:"})," ",(0,t.jsx)(n.code,{children:"void"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"std::function<void(const HandshakeResult& result, Session& session)> callback"})}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Called when a handshake completes successfully.",(0,t.jsx)(n.br,{}),"\n","You can interact with the session object in this callback."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"setonhandshakefailed",children:"setOnHandshakeFailed"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Return type:"})," ",(0,t.jsx)(n.code,{children:"void"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"std::function<void(const HandshakeResult& result)> callback"})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Called when a client fails to complete the handshake."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"setonerror",children:"setOnError"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Return type:"})," ",(0,t.jsx)(n.code,{children:"void"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"std::function<void(const std::string& errorMessage)> callback"})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Called when socket creation, binding, or listening fails."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"related",children:"Related"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"./lightweightsecuretcp",children:"LightweightSecureTCP"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"./core-lightweightsecureclient",children:"LightweightSecureClient"})}),"\n"]})]})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>l});var r=s(6540);const t={},i=r.createContext(t);function c(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);